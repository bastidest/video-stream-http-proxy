declare module "onvif" {
  /** Declaration file generated by dts-gen */

  export class Cam {
    constructor(options: any, callback: any);

    absoluteMove(
      options: {
        x: number;
        y: number;
        zoom: number;
        speed?: {
          x: number;
          y: number;
          zoom: number;
        };
      },
      callback: (err: any, _: void) => any
    ): void;

    addAudioEncoderConfiguration(options: any, callback: any): void;

    addAudioSourceConfiguration(options: any, callback: any): void;

    addVideoEncoderConfiguration(options: any, callback: any): void;

    addVideoSourceConfiguration(options: any, callback: any): void;

    connect(callback: any): any;

    continuousMove(options: any, callback: any): void;

    createProfile(options: any, callback: any): void;

    createPullPointSubscription(callback: any): void;

    createUsers(users: any, callback: any): any;

    deleteProfile(token: any, callback: any): void;

    deleteUsers(users: any, callback: any): any;

    getActiveSources(): any;

    getAudioEncoderConfiguration(token: any, callback: any): any;

    getAudioEncoderConfigurationOptions(token: any, callback: any): any;

    getAudioEncoderConfigurations(callback: any): any;

    getAudioOutputConfigurations(callback: any): any;

    getAudioOutputs(callback: any): any;

    getAudioSourceConfigurations(callback: any): any;

    getAudioSources(callback: any): any;

    getCapabilities(callback: any): void;

    getConfigurationOptions(configurationToken: any, callback: any): void;

    getConfigurations(callback: any): void;

    getCurrentImagingPreset(options: any, callback: any): void;

    getDNS(callback: any): void;

    getDeviceInformation(callback: any): void;

    getEventProperties(callback: any): void;

    getEventServiceCapabilities(callback: any): void;

    getHostname(callback: any): void;

    getImagingServiceCapabilities(callback: any): void;

    getImagingSettings(options: any, callback: any): void;

    getMediaServiceCapabilities(callback: any): void;

    getNTP(callback: any): void;

    getNetworkDefaultGateway(callback: any): void;

    getNetworkInterfaces(callback: any): void;

    getNetworkProtocols(callback: any): void;

    getNodes(callback: any): void;

    getOSDs(token: any, callback: any): void;

    getPresets(options: any, callback: any): void;

    getProfiles(callback: any): any;

    getRecordings(callback: any): void;

    getReplayUri(options: any, callback: any): void;

    getScopes(callback: any): void;

    getServiceCapabilities(callback: any): void;

    getServices(includeCapability: any, callback: any): void;

    getSnapshotUri(options: any, callback: any): void;

    getStatus(options: any, callback: any): void;

    getStreamUri(
      options: any,
      callback: (err: any, stream: { uri: string }) => any
    ): void;

    getSystemDateAndTime(callback: any): void;

    getUsers(callback: any): any;

    getVideoEncoderConfiguration(token: any, callback: any): any;

    getVideoEncoderConfigurationOptions(options: any, callback: any): any;

    getVideoEncoderConfigurations(callback: any): any;

    getVideoSourceConfigurations(callback: any): any;

    getVideoSourceOptions(options: any, callback: any): void;

    getVideoSources(callback: any): void;

    gotoHomePosition(
      options: {
        profileToken?: string;
        speed?: {
          x: number;
          y: number;
          zoom: number;
        };
      },
      callback: (err: any, _: void) => any
    ): void;

    gotoPreset(options: any, callback: any): void;

    pullMessages(options: any, callback: any): void;

    relativeMove(
      options: {
        x: number;
        y: number;
        zoom: number;
        speed?: {
          x: number;
          y: number;
          zoom: number;
        };
      },
      callback: (err: any, _: void) => any
    ): void;

    removeAudioEncoderConfiguration(profileToken: any, callback: any): void;

    removeAudioSourceConfiguration(profileToken: any, callback: any): void;

    removePreset(options: any, callback: any): void;

    renew(options: any, callback: any): void;

    setAudioEncoderConfiguration(options: any, callback: any): any;

    setCurrentImagingPreset(options: any, callback: any): void;

    setDNS(options: any, callback: any): any;

    setHomePosition(options: any, callback: any): void;

    setImagingSettings(options: any, callback: any): void;

    setNTP(options: any, callback: any): void;

    setNetworkDefaultGateway(options: any, callback: any): any;

    setNetworkInterfaces(options: any, callback: any): void;

    setPreset(options: any, callback: any): void;

    setScopes(scopes: any, callback: any): any;

    setSystemDateAndTime(options: any, callback: any): any;

    setSystemFactoryDefault(hard: any, callback: any): void;

    setUsers(users: any, callback: any): any;

    setVideoEncoderConfiguration(options: any, callback: any): any;

    stop(options: any, callback: any): void;

    systemReboot(callback: any): void;

    unsubscribe(callback: any): void;
  }

  export namespace Discovery {
    function addListener(type: any, listener: any): any;

    function emit(type: any, args: any): any;

    function eventNames(): any;

    function getMaxListeners(): any;

    function listenerCount(type: any): any;

    function listeners(type: any): any;

    function off(type: any, listener: any): any;

    function on(type: any, listener: any): any;

    function once(type: any, listener: any): any;

    function prependListener(type: any, listener: any): any;

    function prependOnceListener(type: any, listener: any): any;

    function probe(options: any, callback: any): any;

    function rawListeners(type: any): any;

    function removeAllListeners(type: any, ...args: any[]): any;

    function removeListener(type: any, listener: any): any;

    function setMaxListeners(n: any): any;
  }
}
